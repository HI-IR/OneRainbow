package com.onerainbow.module.seek

import android.content.pm.ActivityInfo
import android.content.res.Configuration
import android.graphics.Color
import android.os.Build
import android.os.Bundle
import android.view.View
import android.view.ViewGroup
import android.view.ViewTreeObserver
import android.view.WindowInsets
import android.view.WindowInsetsController
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.media3.common.MediaItem
import androidx.media3.common.Player
import androidx.media3.exoplayer.ExoPlayer
import androidx.recyclerview.widget.LinearLayoutManager
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.onerainbow.lib.base.BaseActivity
import com.onerainbow.lib.base.utils.CopyUtils
import com.onerainbow.lib.route.RoutePath
import com.onerainbow.module.seek.adapter.CommentAdapter_mv
import com.onerainbow.module.seek.data.MvUrl
import com.onerainbow.module.seek.data.UrlData
import com.onerainbow.module.seek.databinding.ActivityVideosBinding
import com.onerainbow.module.seek.databinding.LayoutBottomSheetCommentsBinding
import com.onerainbow.module.seek.viewmodel.VideoViewModel
import com.onerainbow.module.share.CustomShare
import com.onerainbow.module.share.utils.ShareUtils
import com.therouter.router.Autowired
import com.therouter.router.Route
import kotlinx.coroutines.Job
import kotlinx.coroutines.launch

@Route(path = RoutePath.MVS)
class VideosActivity : BaseActivity<ActivityVideosBinding>() {

    // Ë∑ØÁî±ÂèÇÊï∞
    @Autowired(name = "id")
    var id: Long? = null

    @Autowired(name = "name")
    lateinit var name: String

    // Êí≠ÊîæÂô®
    private lateinit var player: ExoPlayer
    private var commentsJob: Job? = null
    lateinit var bottomSheetDialog: BottomSheetDialog

    // Áä∂ÊÄÅÊ†áÂøó
    private var isFullScreen = false
    private var isUserSeeking = false

    private val videoViewModel: VideoViewModel by lazy { VideoViewModel() }


    // ÁõëÂê¨Âô®ÂÆö‰πâ üòä

    // Êí≠ÊîæÁä∂ÊÄÅÁõëÂê¨ÔºàÊí≠Êîæ/ÊöÇÂÅúÊåâÈíÆÊõ¥Êñ∞ & SeekBarÊúÄÂ§ßÂÄºËÆæÁΩÆÔºâ
    private val playerListener = object : Player.Listener {
        override fun onIsPlayingChanged(isPlaying: Boolean) {
            updatePlayPauseButton()
        }

        override fun onPlaybackStateChanged(state: Int) {
            if (state == Player.STATE_READY) {
                binding.seekBar.max = player.duration.toInt()
            }
        }
    }

    // ËøõÂ∫¶Êõ¥Êñ∞ÁõëÂê¨ÔºàÊéßÂà∂ËøõÂ∫¶Êù°Âà∑Êñ∞Ôºâ
    private val playStateListener = object : Player.Listener {
        override fun onIsPlayingChanged(isPlaying: Boolean) {
            if (isPlaying) {
                if (binding.seekBar.isAttachedToWindow) {
                    binding.seekBar.post(progressUpdateRunnable)
                }
            } else {
                binding.seekBar.removeCallbacks(progressUpdateRunnable)
            }
        }
    }

    // Â±èÂπïÊñπÂêëÁõëÂê¨ÔºàÂàáÊç¢ÂÖ®Â±è/ÈÄÄÂá∫ÂÖ®Â±èÔºâ
    private val layoutListener = ViewTreeObserver.OnGlobalLayoutListener {
        val orientation = resources.configuration.orientation
        if (orientation == Configuration.ORIENTATION_LANDSCAPE && !isFullScreen) {
            //Configuration.ORIENTATION_LANDSCAPEÊòØ Android View ÁöÑ‰∏Ä‰∏™Â±ûÊÄßÔºåË°®Á§∫ÂΩìÂâç SeekBar ÊòØÂê¶Â∑≤ÁªèÈôÑÁùÄÔºàÊåÇËΩΩÔºâÂú®Á™óÂè£‰∏ä„ÄÇ
            //
            //Âè™ÊúâÂΩìËßÜÂõæÂ∑≤ÁªèÊòæÁ§∫ÔºàÊàñËÄÖÂç≥Â∞ÜÊòæÁ§∫ÔºâÂú®Â±èÂπï‰∏äÔºåÊâçËÉΩÂÆâÂÖ®Âú∞Ë∞ÉÁî® post() ÊñπÊ≥ï„ÄÇ
            enterFullScreen()
        } else if (orientation == Configuration.ORIENTATION_PORTRAIT && isFullScreen) {
            exitFullScreen()
        }
    }

    // ÂÆöÊó∂Âà∑Êñ∞ËøõÂ∫¶Êù°
    private val progressUpdateRunnable = object : Runnable {
        override fun run() {
            if (!isUserSeeking && player.isPlaying) {
                val currentPos = player.currentPosition
                val duration = player.duration

                binding.seekBar.progress = currentPos.toInt()

                // Êõ¥Êñ∞Êó∂Èó¥ÊñáÊú¨
                binding.tvCurrentTime.text = formatTime(currentPos)
                binding.tvTotalTime.text = formatTime(duration)
            }
            // 0.5ÁßíÂæ™ÁéØ
            binding.seekBar.postDelayed(this, 500)
        }
    }
    private val hideControlsRunnable = Runnable {
        binding.overlayControls.visibility = View.GONE
    }

    private fun showControlsTemporarily() {
        // ÊòæÁ§∫ÊéßÂà∂Ê†è
        binding.overlayControls.visibility = View.VISIBLE
        // ÂÖàÁßªÈô§‰πãÂâçÁöÑÈöêËóè‰ªªÂä°ÔºåÈÅøÂÖçÈáçÂ§çË∞ÉÁî®
        binding.overlayControls.removeCallbacks(hideControlsRunnable)
        // Âª∂Ëøü3ÁßíËá™Âä®ÈöêËóè
        binding.overlayControls.postDelayed(hideControlsRunnable, 3000)
    }


    override fun getViewBinding(): ActivityVideosBinding =
        ActivityVideosBinding.inflate(layoutInflater)

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            // ‰øùËØÅÁä∂ÊÄÅÊ†èÊñáÂ≠óÊòØÊµÖËâ≤ÔºàÁôΩËâ≤Ôºâ
            window.insetsController?.setSystemBarsAppearance(
                0, // Ê∏ÖÈô§‰∫ÆËâ≤Áä∂ÊÄÅ
                WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS
            )
        } else {
            @Suppress("DEPRECATION")
            window.decorView.systemUiVisibility =
                window.decorView.systemUiVisibility and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv()
        }
        // Ê≥®ÂÜåÂÖ®Â±ÄÂ∏ÉÂ±ÄÁõëÂê¨
        binding.root.viewTreeObserver.addOnGlobalLayoutListener(layoutListener)
        player = ExoPlayer.Builder(applicationContext).build()//ÂÖàÂàùÂßãÂåñÂêéÈù¢ÂÜç‰º†ÂÖ•url
        binding.playerView.player = player
    }

    override fun observeData() {
        videoViewModel._getUrlLiveData.observe(this) { result ->
            initPlayer(result.data.url)
            initUI()
            videoViewModel.getCommentNumber(id!!)
        }
        videoViewModel.getCommentNumberLiveData.observe(this) { result ->
            binding.mvLikeTv.text = result.likedCount.toString()
            binding.mvCommentTv.text = result.commentCount.toString()
            binding.mvShareTv.text = result.shareCount.toString()

        }

    }

    override fun initEvent() {
        binding.mvShareImg.setOnClickListener{
            initShare()
        }
        binding.videoName.text = name
        binding.videoBack.setOnClickListener {
            finish()
        }
        id?.let {
            videoViewModel.getUrl(it)
        }
        binding.mvCommentImg.setOnClickListener {
            showCommentsBottomSheet()
        }

        // ÁªôÊí≠ÊîæÂô®ËßÜÂõæÊàñÊ†πÂ∏ÉÂ±ÄËÆæÁΩÆÁÇπÂáªÁõëÂê¨ÔºåÁÇπÂáªÊó∂ÊòæÁ§∫ÊéßÂà∂Ê†è
        binding.playerView.setOnClickListener {
            if (binding.overlayControls.visibility == View.VISIBLE) {
                // Â¶ÇÊûúÂ∑≤ÁªèÊòæÁ§∫ÔºåÁÇπÂáªÂ∞±ÈöêËóè
                binding.overlayControls.visibility = View.GONE
                binding.overlayControls.removeCallbacks(hideControlsRunnable)
            } else {
                // Â¶ÇÊûúÈöêËóèÔºåÁÇπÂáªÂ∞±ÊòæÁ§∫ÁÑ∂Âêé3ÁßíÂêéÈöêËóè
                showControlsTemporarily()
            }
        }

    }
    private fun initShare(){
        val url = videoViewModel.Url.value
        if (url != null) {
            val customShare = CustomShare(this)
            customShare.setOnQqClickListener{
                ShareUtils.shareToQQ(
                    this,
                    "${name}Ëøô‰∏™ËßÜÈ¢ëÂæàÊúâÊÑèÊÄùÔºåÂàÜ‰∫´Áªô‰Ω†Â•ΩÂï¶\n${url.data.url}"
                )
                customShare.dismiss()
            }
            customShare.setOnWxClickListener {
                ShareUtils.shareToWX(
                    this,
                    "${name}Ëøô‰∏™ËßÜÈ¢ëÂæàÊúâÊÑèÊÄùÔºåÂàÜ‰∫´Áªô‰Ω†Â•ΩÂï¶\n${url.data.url}"
                )
            }
            customShare.setOnBrowseClickListener{
                ShareUtils.shareToBrowser(this,url.data.url)
                customShare.dismiss()
            }
            customShare.setOnLinkClickListener{
                CopyUtils.copy(
                    this,
                    "${name}Ëøô‰∏™ËßÜÈ¢ëÂæàÊúâÊÑèÊÄùÔºåÂàÜ‰∫´Áªô‰Ω†Â•ΩÂï¶\n${url.data.url}"
                )
                customShare.dismiss()
            }
            customShare.show()
        }

    }

    //ÊòæÁ§∫Â∫ïÈÉ®ÂºπÁ™ó->ËøôÈáåÈù¢‰ΩøÁî®‰∫Üreycleview
    private fun showCommentsBottomSheet() {
        if (::bottomSheetDialog.isInitialized && bottomSheetDialog.isShowing) {
            bottomSheetDialog.dismiss()
        }
        // Áî® ViewBinding ÁªëÂÆö BottomSheet Â∏ÉÂ±Ä
        val binding = LayoutBottomSheetCommentsBinding.inflate(layoutInflater)

        bottomSheetDialog = BottomSheetDialog(this)
        bottomSheetDialog.setContentView(binding.root)
        bottomSheetDialog.setOnDismissListener {
            // ÂÖ≥Èó≠ÂºπÁ™óÊó∂ÂèñÊ∂àÂçèÁ®ãÔºåÈÅøÂÖçÊ≥ÑÊºè
            commentsJob?.cancel()
        }

        // ÂàùÂßãÂåñ RecyclerView
        val adapter = CommentAdapter_mv(this)
        binding.recyclerViewComments.layoutManager = LinearLayoutManager(this)
        binding.recyclerViewComments.adapter = adapter
        // ÁõëÂê¨ËØÑËÆ∫ÁÇπÂáª
        commentsJob?.cancel()
        commentsJob = lifecycleScope.launch {
            // üëáÁªëÂÆöÁîüÂëΩÂë®ÊúüÔºåËá™Âä®Âú® onDestroy ÂèñÊ∂à
            repeatOnLifecycle(Lifecycle.State.STARTED) {
                videoViewModel.getComments(id!!).collect { pagingData ->
                    adapter.submitData(pagingData)
                }
            }
        }
        bottomSheetDialog.show()

    }


    private fun initPlayer(url: String) {
        val mediaItem = MediaItem.fromUri(url)
        player.setMediaItem(mediaItem)
        player.prepare()
        player.playWhenReady = true
        // Ê≥®ÂÜåÁõëÂê¨Âô®
        player.addListener(playerListener)
        player.addListener(playStateListener)
    }


    private fun initUI() {
        // Êéß‰ª∂ÈÄÇÈÖçÁ≥ªÁªüÁ™óÂè£
        binding.root.fitsSystemWindows = false
        binding.playerView.fitsSystemWindows = false

        binding.root.setOnApplyWindowInsetsListener { _, insets ->
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                WindowInsets.CONSUMED
            } else {
                @Suppress("DEPRECATION")
                insets.consumeSystemWindowInsets()
            }
        }

        // Ëá™ÂÆö‰πâÊéßÂà∂Ê†èÊòæÁ§∫
        binding.overlayControls.visibility = View.VISIBLE

        // Êí≠Êîæ/ÊöÇÂÅúÊåâÈíÆ
        binding.playPauseButton.setOnClickListener {
            if (player.isPlaying) {
                player.pause()
            } else {
                player.play()
            }
        }

        // ÂÖ®Â±èÂàáÊç¢ÊåâÈíÆ
        binding.fullscreenButton.setOnClickListener {
            toggleFullScreen()
        }

        // SeekBar‰∫ã‰ª∂
        binding.seekBar.max = 0
        binding.seekBar.progress = 0
        binding.seekBar.setOnSeekBarChangeListener(object :
            android.widget.SeekBar.OnSeekBarChangeListener {
            override fun onProgressChanged(
                seekBar: android.widget.SeekBar?,
                progress: Int,
                fromUser: Boolean
            ) {
                if (fromUser) {

                }
            }

            override fun onStartTrackingTouch(seekBar: android.widget.SeekBar?) {
                isUserSeeking = true
            }

            override fun onStopTrackingTouch(seekBar: android.widget.SeekBar?) {
                isUserSeeking = false
                seekBar?.let {
                    player.seekTo(it.progress.toLong())
                }
            }
        })

        // ÂàùÂßãÂåñÊí≠Êîæ/ÊöÇÂÅúÊåâÈíÆÁä∂ÊÄÅ
        updatePlayPauseButton()
    }


    //Êõ¥Êñ∞ÂõæÊ†áÁä∂ÊÄÅ
    private fun updatePlayPauseButton() {
        if (player.isPlaying) {
            binding.playPauseButton.setImageResource(com.onerainbow.module.seek.R.drawable.play_stop)
        } else {
            binding.playPauseButton.setImageResource(com.onerainbow.module.seek.R.drawable.ic_play_arrow)
        }
    }

    //Âà§Êñ≠ÊòØÂê¶ÂàáÊç¢ÂÖ®Â±è
    private fun toggleFullScreen() {
        if (!isFullScreen) {
            requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE
            enterFullScreen()
        } else {
            requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
            exitFullScreen()
        }
    }


    private fun enterFullScreen() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            window.setDecorFitsSystemWindows(false)
            window.insetsController?.let {
                it.hide(WindowInsets.Type.statusBars() or WindowInsets.Type.navigationBars())
                it.systemBarsBehavior = WindowInsetsController.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
            }
        } else {
            @Suppress("DEPRECATION")
            window.decorView.systemUiVisibility = (
                    View.SYSTEM_UI_FLAG_FULLSCREEN
                            or View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                            or View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
                            or View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                            or View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                            or View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                    )
        }

        binding.playerView.layoutParams = binding.playerView.layoutParams.apply {
            height = ViewGroup.LayoutParams.MATCH_PARENT
            width = ViewGroup.LayoutParams.MATCH_PARENT
        }
        binding.videoBack.visibility = View.GONE
        binding.videoName.visibility = View.GONE
        binding.mvLikeImg.visibility = View.GONE
        binding.mvCommentImg.visibility = View.GONE
        binding.mvShareImg.visibility = View.GONE

        binding.mvLikeTv.visibility = View.GONE
        binding.mvCommentTv.visibility = View.GONE
        binding.mvShareTv.visibility = View.GONE

        isFullScreen = true
    }


    private fun exitFullScreen() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            window.setDecorFitsSystemWindows(true)
            window.insetsController?.show(WindowInsets.Type.statusBars() or WindowInsets.Type.navigationBars())
            // Âº∫Âà∂Áä∂ÊÄÅÊ†èÈ¢úËâ≤‰∏∫ÈªëËâ≤
            window.statusBarColor = Color.BLACK
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // ‰øùËØÅÁä∂ÊÄÅÊ†èÊñáÂ≠óÊòØÊµÖËâ≤ÔºàÁôΩËâ≤Ôºâ
                window.insetsController?.setSystemBarsAppearance(
                    0, // Ê∏ÖÈô§‰∫ÆËâ≤Áä∂ÊÄÅ
                    WindowInsetsController.APPEARANCE_LIGHT_STATUS_BARS
                )
            }

        } else {
            @Suppress("DEPRECATION")
            window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_VISIBLE
            window.statusBarColor = Color.BLACK
            @Suppress("DEPRECATION")
            window.decorView.systemUiVisibility =
                window.decorView.systemUiVisibility and View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR.inv()
        }

        val heightInPx = (250 * resources.displayMetrics.density).toInt()
        binding.playerView.layoutParams = binding.playerView.layoutParams.apply {
            height = heightInPx
            width = ViewGroup.LayoutParams.MATCH_PARENT
        }
        binding.videoBack.visibility = View.VISIBLE
        binding.videoName.visibility = View.VISIBLE
        binding.mvLikeImg.visibility = View.VISIBLE
        binding.mvCommentImg.visibility = View.VISIBLE
        binding.mvShareImg.visibility = View.VISIBLE

        binding.mvLikeTv.visibility = View.VISIBLE
        binding.mvCommentTv.visibility = View.VISIBLE
        binding.mvShareTv.visibility = View.VISIBLE

        isFullScreen = false
    }

    //ËΩ¨Êç¢Êó∂Èó¥
    private fun formatTime(ms: Long): String {
        val totalSeconds = ms / 1000
        val minutes = totalSeconds / 60
        val seconds = totalSeconds % 60
        return String.format("%02d:%02d", minutes, seconds)
    }


    override fun onPause() {
        binding.seekBar.removeCallbacks(progressUpdateRunnable)
        binding.overlayControls.removeCallbacks(hideControlsRunnable)
        super.onPause()
    }

    override fun onStop() {
        binding.seekBar.removeCallbacks(progressUpdateRunnable)
        super.onStop()
        if (player.isPlaying) player.pause()
    }

    override fun onResume() {
        super.onResume()
        if (player.isPlaying && binding.seekBar.isAttachedToWindow) {
            binding.seekBar.post(progressUpdateRunnable)
        }
    }

    override fun onDestroy() {
        binding.seekBar.removeCallbacks(progressUpdateRunnable)
        binding.root.viewTreeObserver.removeOnGlobalLayoutListener(layoutListener)
        binding.overlayControls.removeCallbacks(hideControlsRunnable)
        if (::player.isInitialized) {
            player.removeListener(playerListener)
            player.removeListener(playStateListener)
            binding.playerView.player = null
            if (!isChangingConfigurations) {
                player.release()
            }
        }
        if (::bottomSheetDialog.isInitialized) {
            bottomSheetDialog.setOnDismissListener(null)
            if (bottomSheetDialog.isShowing) bottomSheetDialog.dismiss()
        }
        commentsJob?.cancel()
        super.onDestroy()
    }

}
